#version 330 core

in GS_OUT {
    vec2 texCoords;
	vec3 Normal;
	vec3 Position;
} fs_in;

out vec4 color;


uniform vec3 cameraPos;
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_reflection1;
uniform samplerCube skybox;

void main()
{             
    vec4 diffuse_color = texture(texture_diffuse1, fs_in.texCoords);
    // Reflection
    vec3 I = normalize(fs_in.Position - cameraPos);
    vec3 R = reflect(I, normalize(fs_in.Normal));
    float reflect_intensity = texture(texture_reflection1, fs_in.texCoords).r;
    vec4 reflect_color;
    if(reflect_intensity > 0) // Only sample reflections when above a certain treshold
        reflect_color = texture(skybox, R) * reflect_intensity;
    // Combine them
    color = diffuse_color + reflect_color;

}